import { DeepPartial, Repository } from 'typeorm';
import { Catalog } from './entities/catalog.entity';
import { Category } from './entities/category.entity';
import { DataValue } from './entities/data_value.entity';
import { MethodType } from './entities/method_type.entity';
import { Qcl } from './entities/qcl.entity';
import { Unit } from './entities/unit.entity';
import { Variable } from './entities/variable.entity';
import { DataSource } from './entities/data_source.entity';
import { Site } from './entities/site';
import { SiteType } from './entities/site_type';
export declare class DataService {
    private dataValueRepo;
    private categoryRepo;
    private catalogRepo;
    private siteRepo;
    private siteTypeRepo;
    private variableRepo;
    private unitRepo;
    private methodRepo;
    private sourceRepo;
    private qclRepo;
    constructor(dataValueRepo: Repository<DataValue>, categoryRepo: Repository<Category>, catalogRepo: Repository<Catalog>, siteRepo: Repository<Site>, siteTypeRepo: Repository<SiteType>, variableRepo: Repository<Variable>, unitRepo: Repository<Unit>, methodRepo: Repository<MethodType>, sourceRepo: Repository<DataSource>, qclRepo: Repository<Qcl>);
    findCategoryById(id: number): Promise<Category | null>;
    getAllCategories(): Promise<Category[]>;
    createCategory(category: DeepPartial<Category>): Promise<DeepPartial<Category> & Category>;
    getVariablesByCategory(categoryId: number): Promise<Variable[]>;
    findDataByCategoryId(id: number): Promise<DataValue[]>;
    findById(id: number): Promise<DataValue | null>;
    loadDataValues(data: DataValue[]): Promise<DataValue[]>;
}
